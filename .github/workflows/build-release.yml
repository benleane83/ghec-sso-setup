name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: read

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Build TypeScript
      run: npm run build

    - name: Package executables
      run: npm run package:win

    - name: Create checksums
      run: |
        cd bin
        sha256sum * > checksums.txt

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: executables
        path: bin/
  release:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: executables
        path: bin/

    - name: Get version info
      id: version
      run: |
        if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
          # For manual triggers, use package.json version with timestamp
          VERSION=$(node -p "require('./package.json').version")
          TIMESTAMP=$(date +%Y%m%d-%H%M%S)
          TAG_NAME="v${VERSION}-debug-${TIMESTAMP}"
          echo "tag_name=${TAG_NAME}" >> $GITHUB_OUTPUT
          echo "is_debug=true" >> $GITHUB_OUTPUT
        else
          # For tag pushes, use the actual tag
          TAG_NAME="${{ github.ref_name }}"
          echo "tag_name=${TAG_NAME}" >> $GITHUB_OUTPUT
          echo "is_debug=false" >> $GITHUB_OUTPUT
        fi

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.version.outputs.tag_name }}
        files: |
          bin/ghec-sso.exe
          bin/checksums.txt
        generate_release_notes: true
        draft: false
        prerelease: ${{ steps.version.outputs.is_debug }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
